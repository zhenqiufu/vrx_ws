// Generated by gencpp from file vrx_gazebo/Task.msg
// DO NOT EDIT!


#ifndef VRX_GAZEBO_MESSAGE_TASK_H
#define VRX_GAZEBO_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vrx_gazebo
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : name()
    , state()
    , ready_time()
    , running_time()
    , elapsed_time()
    , remaining_time()
    , timed_out(false)
    , score(0.0)  {
    }
  Task_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , state(_alloc)
    , ready_time()
    , running_time()
    , elapsed_time()
    , remaining_time()
    , timed_out(false)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef ros::Time _ready_time_type;
  _ready_time_type ready_time;

   typedef ros::Time _running_time_type;
  _running_time_type running_time;

   typedef ros::Duration _elapsed_time_type;
  _elapsed_time_type elapsed_time;

   typedef ros::Duration _remaining_time_type;
  _remaining_time_type remaining_time;

   typedef uint8_t _timed_out_type;
  _timed_out_type timed_out;

   typedef double _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::vrx_gazebo::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrx_gazebo::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::vrx_gazebo::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::vrx_gazebo::Task > TaskPtr;
typedef boost::shared_ptr< ::vrx_gazebo::Task const> TaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vrx_gazebo::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vrx_gazebo::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vrx_gazebo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'vrx_gazebo': ['/home/scar1et/vrx_ws/src/vrx/vrx_gazebo/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vrx_gazebo::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrx_gazebo::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrx_gazebo::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrx_gazebo::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrx_gazebo::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrx_gazebo::Task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vrx_gazebo::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c588f6342ff17e31f535731fede10fd5";
  }

  static const char* value(const ::vrx_gazebo::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc588f6342ff17e31ULL;
  static const uint64_t static_value2 = 0xf535731fede10fd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrx_gazebo::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vrx_gazebo/Task";
  }

  static const char* value(const ::vrx_gazebo::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vrx_gazebo::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Task name.\n"
"string name\n"
"\n"
"# Task state.\n"
"string state\n"
"\n"
"# Absolute sim time when this task will be in \"ready\" state (ROS time).\n"
"time ready_time\n"
"\n"
"# Absolute sim time when this task will be in \"running\" state (ROS time).\n"
"time running_time\n"
"\n"
"# Time elapsed since task started (ROS time). This is the current sim time\n"
"# minus start time.\n"
"# When the elapsed time reaches the task timeout, `timed_out` is set to true.\n"
"duration elapsed_time\n"
"\n"
"# Remaining time until the task times out (ROS time).\n"
"duration remaining_time\n"
"\n"
"# True if task timed out.\n"
"bool timed_out\n"
"\n"
"# The score.\n"
"float64 score\n"
;
  }

  static const char* value(const ::vrx_gazebo::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vrx_gazebo::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.state);
      stream.next(m.ready_time);
      stream.next(m.running_time);
      stream.next(m.elapsed_time);
      stream.next(m.remaining_time);
      stream.next(m.timed_out);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrx_gazebo::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vrx_gazebo::Task_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "ready_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.ready_time);
    s << indent << "running_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.running_time);
    s << indent << "elapsed_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.elapsed_time);
    s << indent << "remaining_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.remaining_time);
    s << indent << "timed_out: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timed_out);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VRX_GAZEBO_MESSAGE_TASK_H
