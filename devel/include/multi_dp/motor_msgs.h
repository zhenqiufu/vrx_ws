// Generated by gencpp from file multi_dp/motor_msgs.msg
// DO NOT EDIT!


#ifndef MULTI_DP_MESSAGE_MOTOR_MSGS_H
#define MULTI_DP_MESSAGE_MOTOR_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_dp
{
template <class ContainerAllocator>
struct motor_msgs_
{
  typedef motor_msgs_<ContainerAllocator> Type;

  motor_msgs_()
    : stamp()
    , rotation()
    , alpha()
    , alpha_deg()
    , BalphaU()
    , tau()
    , u()  {
    }
  motor_msgs_(const ContainerAllocator& _alloc)
    : stamp()
    , rotation(_alloc)
    , alpha(_alloc)
    , alpha_deg(_alloc)
    , BalphaU(_alloc)
    , tau(_alloc)
    , u(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rotation_type;
  _rotation_type rotation;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _alpha_type;
  _alpha_type alpha;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _alpha_deg_type;
  _alpha_deg_type alpha_deg;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _BalphaU_type;
  _BalphaU_type BalphaU;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tau_type;
  _tau_type tau;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _u_type;
  _u_type u;





  typedef boost::shared_ptr< ::multi_dp::motor_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_dp::motor_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct motor_msgs_

typedef ::multi_dp::motor_msgs_<std::allocator<void> > motor_msgs;

typedef boost::shared_ptr< ::multi_dp::motor_msgs > motor_msgsPtr;
typedef boost::shared_ptr< ::multi_dp::motor_msgs const> motor_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_dp::motor_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_dp::motor_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_dp::motor_msgs_<ContainerAllocator1> & lhs, const ::multi_dp::motor_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.rotation == rhs.rotation &&
    lhs.alpha == rhs.alpha &&
    lhs.alpha_deg == rhs.alpha_deg &&
    lhs.BalphaU == rhs.BalphaU &&
    lhs.tau == rhs.tau &&
    lhs.u == rhs.u;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_dp::motor_msgs_<ContainerAllocator1> & lhs, const ::multi_dp::motor_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_dp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multi_dp::motor_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_dp::motor_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_dp::motor_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_dp::motor_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_dp::motor_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_dp::motor_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_dp::motor_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "887cc1d691af56b569d609397c3a5014";
  }

  static const char* value(const ::multi_dp::motor_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x887cc1d691af56b5ULL;
  static const uint64_t static_value2 = 0x69d609397c3a5014ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_dp::motor_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_dp/motor_msgs";
  }

  static const char* value(const ::multi_dp::motor_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_dp::motor_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64[] rotation\n"
"float64[] alpha\n"
"float64[] alpha_deg\n"
"float64[] BalphaU\n"
"float64[] tau\n"
"float64[] u\n"
;
  }

  static const char* value(const ::multi_dp::motor_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_dp::motor_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.rotation);
      stream.next(m.alpha);
      stream.next(m.alpha_deg);
      stream.next(m.BalphaU);
      stream.next(m.tau);
      stream.next(m.u);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_dp::motor_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_dp::motor_msgs_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rotation[i]);
    }
    s << indent << "alpha[]" << std::endl;
    for (size_t i = 0; i < v.alpha.size(); ++i)
    {
      s << indent << "  alpha[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.alpha[i]);
    }
    s << indent << "alpha_deg[]" << std::endl;
    for (size_t i = 0; i < v.alpha_deg.size(); ++i)
    {
      s << indent << "  alpha_deg[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.alpha_deg[i]);
    }
    s << indent << "BalphaU[]" << std::endl;
    for (size_t i = 0; i < v.BalphaU.size(); ++i)
    {
      s << indent << "  BalphaU[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.BalphaU[i]);
    }
    s << indent << "tau[]" << std::endl;
    for (size_t i = 0; i < v.tau.size(); ++i)
    {
      s << indent << "  tau[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau[i]);
    }
    s << indent << "u[]" << std::endl;
    for (size_t i = 0; i < v.u.size(); ++i)
    {
      s << indent << "  u[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.u[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_DP_MESSAGE_MOTOR_MSGS_H
