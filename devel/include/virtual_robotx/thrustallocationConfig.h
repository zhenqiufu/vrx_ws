//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the dp_core package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __dp_core__THRUSTALLOCATIONCONFIG_H__
#define __dp_core__THRUSTALLOCATIONCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace dp_core
{
  class thrustallocationConfigStatics;

  class thrustallocationConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(thrustallocationConfig &config, const thrustallocationConfig &max, const thrustallocationConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const thrustallocationConfig &config1, const thrustallocationConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, thrustallocationConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const thrustallocationConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, thrustallocationConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const thrustallocationConfig &config) const = 0;
      virtual void getValue(const thrustallocationConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T thrustallocationConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (thrustallocationConfig::* field);

      virtual void clamp(thrustallocationConfig &config, const thrustallocationConfig &max, const thrustallocationConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const thrustallocationConfig &config1, const thrustallocationConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, thrustallocationConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const thrustallocationConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, thrustallocationConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const thrustallocationConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const thrustallocationConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, thrustallocationConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, thrustallocationConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<thrustallocationConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(thrustallocationConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("propeller_K_positive"==(*_i)->name){propeller_K_positive = boost::any_cast<std::string>(val);}
        if("propeller_K_negtive"==(*_i)->name){propeller_K_negtive = boost::any_cast<std::string>(val);}
        if("propeller_max_rotation"==(*_i)->name){propeller_max_rotation = boost::any_cast<std::string>(val);}
        if("propeller_min_rotation"==(*_i)->name){propeller_min_rotation = boost::any_cast<std::string>(val);}
        if("propeller_max_alfa"==(*_i)->name){propeller_max_alfa = boost::any_cast<std::string>(val);}
        if("propeller_min_alfa"==(*_i)->name){propeller_min_alfa = boost::any_cast<std::string>(val);}
        if("propeller_delta_alfa"==(*_i)->name){propeller_delta_alfa = boost::any_cast<std::string>(val);}
        if("propeller_delta_rotation"==(*_i)->name){propeller_delta_rotation = boost::any_cast<std::string>(val);}
        if("max_target_force"==(*_i)->name){max_target_force = boost::any_cast<std::string>(val);}
        if("min_target_force"==(*_i)->name){min_target_force = boost::any_cast<std::string>(val);}
        if("allman_switch"==(*_i)->name){allman_switch = boost::any_cast<bool>(val);}
        if("dp_switch"==(*_i)->name){dp_switch = boost::any_cast<bool>(val);}
        if("UTMx_switch"==(*_i)->name){UTMx_switch = boost::any_cast<bool>(val);}
        if("UTMy_switch"==(*_i)->name){UTMy_switch = boost::any_cast<bool>(val);}
        if("head_switch"==(*_i)->name){head_switch = boost::any_cast<bool>(val);}
        if("debug_mode"==(*_i)->name){debug_mode = boost::any_cast<bool>(val);}
        if("log_level"==(*_i)->name){log_level = boost::any_cast<int>(val);}
      }
    }

    std::string propeller_K_positive;
std::string propeller_K_negtive;
std::string propeller_max_rotation;
std::string propeller_min_rotation;
std::string propeller_max_alfa;
std::string propeller_min_alfa;
std::string propeller_delta_alfa;
std::string propeller_delta_rotation;
std::string max_target_force;
std::string min_target_force;
bool allman_switch;
bool dp_switch;
bool UTMx_switch;
bool UTMy_switch;
bool head_switch;
bool debug_mode;
int log_level;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_K_positive;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_K_negtive;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_max_rotation;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_min_rotation;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_max_alfa;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_min_alfa;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_delta_alfa;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string propeller_delta_rotation;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string max_target_force;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string min_target_force;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool allman_switch;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool dp_switch;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool UTMx_switch;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool UTMy_switch;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool head_switch;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool debug_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int log_level;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("thrustallocationConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const thrustallocationConfig &__max__ = __getMax__();
      const thrustallocationConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const thrustallocationConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const thrustallocationConfig &__getDefault__();
    static const thrustallocationConfig &__getMax__();
    static const thrustallocationConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const thrustallocationConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void thrustallocationConfig::ParamDescription<std::string>::clamp(thrustallocationConfig &config, const thrustallocationConfig &max, const thrustallocationConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class thrustallocationConfigStatics
  {
    friend class thrustallocationConfig;

    thrustallocationConfigStatics()
    {
thrustallocationConfig::GroupDescription<thrustallocationConfig::DEFAULT, thrustallocationConfig> Default("Default", "", 0, 0, true, &thrustallocationConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_K_positive = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_K_positive = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_K_positive = "0.025, 0.025, 0.025, 0.025";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_K_positive", "str", 0, "K_positive", "", &thrustallocationConfig::propeller_K_positive)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_K_positive", "str", 0, "K_positive", "", &thrustallocationConfig::propeller_K_positive)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_K_negtive = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_K_negtive = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_K_negtive = "0.01, 0.01, 0.01, 0.01";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_K_negtive", "str", 0, "K_negtive", "", &thrustallocationConfig::propeller_K_negtive)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_K_negtive", "str", 0, "K_negtive", "", &thrustallocationConfig::propeller_K_negtive)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_max_rotation = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_max_rotation = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_max_rotation = "100,100,100,100";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_max_rotation", "str", 0, "max_rotation", "", &thrustallocationConfig::propeller_max_rotation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_max_rotation", "str", 0, "max_rotation", "", &thrustallocationConfig::propeller_max_rotation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_min_rotation = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_min_rotation = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_min_rotation = "2, 2, 2, 2";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_min_rotation", "str", 0, "min_rotation", "", &thrustallocationConfig::propeller_min_rotation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_min_rotation", "str", 0, "min_rotation", "", &thrustallocationConfig::propeller_min_rotation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_max_alfa = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_max_alfa = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_max_alfa = "3.32,   0.0174, 3.32, 0.0174 ";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_max_alfa", "str", 0, "max_alfa", "", &thrustallocationConfig::propeller_max_alfa)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_max_alfa", "str", 0, "max_alfa", "", &thrustallocationConfig::propeller_max_alfa)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_min_alfa = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_min_alfa = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_min_alfa = "-0.0174,-3.32,  -0.0174,-3.32";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_min_alfa", "str", 0, "min_alfa", "", &thrustallocationConfig::propeller_min_alfa)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_min_alfa", "str", 0, "min_alfa", "", &thrustallocationConfig::propeller_min_alfa)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_delta_alfa = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_delta_alfa = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_delta_alfa = "0.157, 0.157,0.157,0.157";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_delta_alfa", "str", 0, "delta_alfa", "", &thrustallocationConfig::propeller_delta_alfa)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_delta_alfa", "str", 0, "delta_alfa", "", &thrustallocationConfig::propeller_delta_alfa)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.propeller_delta_rotation = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.propeller_delta_rotation = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.propeller_delta_rotation = "50,50,50,50";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_delta_rotation", "str", 0, "delta_rotation", "", &thrustallocationConfig::propeller_delta_rotation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("propeller_delta_rotation", "str", 0, "delta_rotation", "", &thrustallocationConfig::propeller_delta_rotation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_target_force = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_target_force = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_target_force = "250,250,250,250";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("max_target_force", "str", 0, "max_target_force", "", &thrustallocationConfig::max_target_force)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("max_target_force", "str", 0, "max_target_force", "", &thrustallocationConfig::max_target_force)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_target_force = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_target_force = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_target_force = "0,0,0,0";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("min_target_force", "str", 0, "min_target_force", "", &thrustallocationConfig::min_target_force)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<std::string>("min_target_force", "str", 0, "min_target_force", "", &thrustallocationConfig::min_target_force)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.allman_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.allman_switch = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.allman_switch = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("allman_switch", "bool", 0, "allman_switch", "", &thrustallocationConfig::allman_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("allman_switch", "bool", 0, "allman_switch", "", &thrustallocationConfig::allman_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dp_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dp_switch = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dp_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("dp_switch", "bool", 0, "dp_switch", "", &thrustallocationConfig::dp_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("dp_switch", "bool", 0, "dp_switch", "", &thrustallocationConfig::dp_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.UTMx_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.UTMx_switch = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.UTMx_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("UTMx_switch", "bool", 0, "UTMx_switch", "", &thrustallocationConfig::UTMx_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("UTMx_switch", "bool", 0, "UTMx_switch", "", &thrustallocationConfig::UTMx_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.UTMy_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.UTMy_switch = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.UTMy_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("UTMy_switch", "bool", 0, "UTMy_switch", "", &thrustallocationConfig::UTMy_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("UTMy_switch", "bool", 0, "UTMy_switch", "", &thrustallocationConfig::UTMy_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.head_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.head_switch = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.head_switch = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("head_switch", "bool", 0, "head_switch", "", &thrustallocationConfig::head_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("head_switch", "bool", 0, "head_switch", "", &thrustallocationConfig::head_switch)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.debug_mode = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.debug_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.debug_mode = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("debug_mode", "bool", 0, "debug_mode", "", &thrustallocationConfig::debug_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<bool>("debug_mode", "bool", 0, "debug_mode", "", &thrustallocationConfig::debug_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.log_level = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.log_level = 2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.log_level = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<int>("log_level", "int", 0, "Set Log Level", "{'enum_description': 'Set Log Level', 'enum': [{'srcline': 28, 'description': 'log print flag:INFO', 'srcfile': '/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'info'}, {'srcline': 29, 'description': 'log print flag:WARN', 'srcfile': '/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'warn'}, {'srcline': 30, 'description': 'log print flag:ERROR', 'srcfile': '/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'error'}]}", &thrustallocationConfig::log_level)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(thrustallocationConfig::AbstractParamDescriptionConstPtr(new thrustallocationConfig::ParamDescription<int>("log_level", "int", 0, "Set Log Level", "{'enum_description': 'Set Log Level', 'enum': [{'srcline': 28, 'description': 'log print flag:INFO', 'srcfile': '/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'info'}, {'srcline': 29, 'description': 'log print flag:WARN', 'srcfile': '/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'warn'}, {'srcline': 30, 'description': 'log print flag:ERROR', 'srcfile': '/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'error'}]}", &thrustallocationConfig::log_level)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(thrustallocationConfig::AbstractGroupDescriptionConstPtr(new thrustallocationConfig::GroupDescription<thrustallocationConfig::DEFAULT, thrustallocationConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<thrustallocationConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<thrustallocationConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<thrustallocationConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    thrustallocationConfig __max__;
    thrustallocationConfig __min__;
    thrustallocationConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const thrustallocationConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static thrustallocationConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &thrustallocationConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const thrustallocationConfig &thrustallocationConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const thrustallocationConfig &thrustallocationConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const thrustallocationConfig &thrustallocationConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<thrustallocationConfig::AbstractParamDescriptionConstPtr> &thrustallocationConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<thrustallocationConfig::AbstractGroupDescriptionConstPtr> &thrustallocationConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const thrustallocationConfigStatics *thrustallocationConfig::__get_statics__()
  {
    const static thrustallocationConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = thrustallocationConfigStatics::get_instance();

    return statics;
  }

//#line 28 "/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg"
      const int thrustallocation_info = 0;
//#line 29 "/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg"
      const int thrustallocation_warn = 1;
//#line 30 "/home/scar1et/vrx_ws/src/virtual_robotx/cfg/thrustallocation_dyn.cfg"
      const int thrustallocation_error = 2;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __THRUSTALLOCATIONRECONFIGURATOR_H__
